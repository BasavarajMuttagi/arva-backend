// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  avatar    String?
  fullname  String
  email     String     @unique
  phone     String?
  password  String
  bookmarks Bookmark[]
  favorites Favorite[]
  Review    Review[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CoffeeShop {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  rating    Float      @default(0)
  address   String
  geo       GeoJson
  images    String[]
  products  Product[]
  bookmarks Bookmark[]
  favorites Favorite[]
  Review    Review[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Bookmark {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  coffeeShop   CoffeeShop @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Favorite {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  coffeeShop   CoffeeShop @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Float
  description  String
  category     Category
  coffeeShop   CoffeeShop? @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId String?     @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Review {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  rating       Float
  comment      String?
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  coffeeShop   CoffeeShop @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum Category {
  COFFEE
  DRINK
  FOOD
}

type GeoJson {
  type        String
  coordinates Float[]
}
